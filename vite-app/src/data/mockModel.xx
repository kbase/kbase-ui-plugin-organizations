import * as types from '../types';
import { organizations } from './data';

export function applyOrgSearch(orgs: types.Organizations, searchTerms: Array<string>) {
    const filteredOrgs = orgs.filter((org) => {
        if (searchTerms.length === 0) {
            return true;
        }
        return searchTerms.every((term) => {
            // todo : make more efficient!!!
            return  (new RegExp(term, 'i').test(org.name));
        })
    })

    return {
        organizations: filteredOrgs,
        totalCount: orgs.length,
        filteredCount: filteredOrgs.length
    }
}

function applySort(organizations: types.Organizations, sortBy:string, sortDescending: boolean) {
    const direction = sortDescending ? -1 : 1
    switch (sortBy) {
    case 'createdAt':
        return  organizations.slice().sort((a, b) => {
            return direction * (a.createdAt.getTime() - b.createdAt.getTime())
        })
    case 'modifiedAt':
        return organizations.slice().sort((a, b) => {
            return direction * (a.modifiedAt.getTime() - b.modifiedAt.getTime())
        })
    case 'name':
        return organizations.slice().sort((a, b) => {
            return direction * a.name.localeCompare(b.name)
        })
    case 'owner':
        return organizations.slice().sort((a, b) => {
            return direction * a.owner.localeCompare(b.owner)
        })
    default:
        console.warn('unimplemented sort field: ' + sortBy)
        return organizations;
    }
}

function applyFilter(organizations: types.Organizations, filter: string, username: string): types.Organizations {
    switch (filter) {
    case 'all':
        return organizations
        break
    case 'owned':
        return organizations.filter((org) => (org.owner === username))
    case 'notOwned':
        return organizations.filter((org) => (org.owner !== username))
    default:
        console.warn('unknown filter : ' + filter)
        return organizations
    }
}

export interface Query {
    searchTerms: Array<string>,
    username: string,
    sortBy: string,
    sortDescending: boolean,
    filter: string
}

export interface QueryResults {
    organizations: types.Organizations,
    total: number
}

function wait(timeout:number) {
    return new Promise((resolve) => {
        window.setTimeout(() => {
            resolve(true)
        }, timeout)
    })
}

// export function newOrg(state: StoreState, action: actions.AddOrg): StoreState {
//     const {organizations, auth:{username}} = state;
//     const org: Organization = {
//         ...action.newOrg,
//         createdAt: new Date(),
//         modifiedAt: new Date(),
//         owner: username
//     }
//     organizations.push(org)
//     return {...state, organizations}
// }

export class Model {
    organizations: types.Organizations

    constructor() {
        this.organizations = organizations;
    }

    queryOrgs(query: Query) : Promise<QueryResults> {
        return new Promise<QueryResults>((resolve) => {
            const filtered = applyFilter(this.organizations, query.filter, query.username)
            const searched = applyOrgSearch(filtered, query.searchTerms)
            const sorted = applySort(searched.organizations, query.sortBy, query.sortDescending)
        
            resolve({
                organizations: sorted,
                total: this.organizations.length
            })
        })
    }

    addOrg(newOrg: types.NewOrganization, username: string) : Promise<types.Organization> {
        return new Promise<types.Organization>((resolve) => {
            
            return wait(200)
                .then(() => {
                    const org: types.Organization = {
                        ...newOrg,
                        createdAt: new Date(),
                        modifiedAt: new Date(),
                        owner: username
                    }
                    this.organizations.push(org);
                    return org;
                })
        })
    }

    updateOrg(orgUpdate: types.OrganizationUpdate) : Promise<types.Organization> {
        return new Promise<types.Organization>((resolve) => {
            return wait(200)
                .then(() => {
                    const org = this.organizations.find((org) => (org.id === orgUpdate.id))!

                    org.name = orgUpdate.name;
                    org.description = orgUpdate.description;
                    return org
                })
        })
    }

    /*
        send update request
        receive update response
        fetch org again
        update the cached org
    */
    // updateOrgOrg(org: Organization) : Promise<void> {
    //     return new Promise<void>((resolve) => {
    //         return wait(200)
    //             .then(() => {
    //                 return;
    //             })
    //     })
    // }

    // deleteOrg(org: Organization) : Promise<void> {
    //     return new Promise<void>((resolve) => {
    //         this.organizations.push(org);
    //         return wait(200)
    //             .then(() => {
    //                 return;
    //             })
    //     })
    // }
}