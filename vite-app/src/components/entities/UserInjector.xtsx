
import { Dispatch } from 'redux'
import { connect } from 'react-redux'
import { StoreState } from '../../types';
import * as actions from '../../redux/actions/entities'
import * as userModel from '../../data/models/user'


export interface OwnProps {
    userId: userModel.Username
}

interface StateProps {
    user: userModel.User | undefined
}

interface DispatchProps {
    onLoad: (userId: userModel.Username) => void
}


// This will trigger when the user entity is populated, via onLoad()
function mapStateToProps(state: StoreState, props: OwnProps): StateProps {
    return {
        user: state.entities.users.byId.get(props.userId)
    }
}

function mapDispatchToProps(dispatch: Dispatch<actions.EntityAction>): DispatchProps {
    return {
        onLoad: (userId: userModel.Username) => {
            dispatch(actions.userLoader(userId) as any)
        }
    }
}

export function withUser(userId: string {
    const ReduxWrapped = connect<StateProps, DispatchProps, OwnProps, StoreState>(mapStateToProps, mapDispatchToProps)(Loader)


// import * as React from 'react'
// import User from './User'

// /// from https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb
// type Omit<T, K> = Pick<T, Exclude<keyof T, K>>
// type Subtract<T, K> = Omit<T, keyof K>

// interface InjectedProps {
//     user: userModel.User | undefined
// }

// interface MakeUserProps {
//     children(props: InjectedProps): JSX.Element
// }

// interface MakeUserState {

// }

// class MakeUser extends React.Component<MakeUserProps, MakeUserState> {
//     state: MakeUserState = {}

//     render() {
//         return this.props.children({
//             user: this.
//         })
//     }
// }


// // const withUser = <SomeProps extends InjectedProps>(
// //     UnwrappedComponent: React.ComponentType<SomeProps>
// //     )  => {
// //     class WithUser extends React.Component<Subtract<SomeProps, InjectedProps>, InjectedState> {
// //         state: InjectedState = {}

// //         render() {
// //             return (
// //                 <UnwrappedComponent 
// //                     {...this.props}
// //                     user={this.props.user} />
// //             )
// //         }
// //     }

// //     return WithUser
// // }


// // class Loader extends React.Component<LoaderProps, LoaderState> {
// //         state: InjectedState = {}

// //         render() {

// //         }


// //     render() {
// //         if (this.props.user) {
// //             return (
// //                 <User user={this.props.user} avatarSize={this.props.avatarSize} />
// //             )
// //         } else {
// //             this.props.onLoad(this.props.userId)
// //             return (
// //                 <div>
// //                     Loading user...
// //                 </div>
// //             )
// //         }
// //     }
// // }

// // export interface Injected

